/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *  RNAseq-VAX Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {
  outdir = './results'
  igenomes_base = "./iGenomes"
  clusterOptions = false
// Pipeline options 

// defaults
  tracedir = "${params.outdir}/pipeline_info"
  version= "0.2.0"
  bamfolder = './results/markDuplicates/'
  outdir = './results'
  fasta = false
  project = false



// options for process addReadGroups
  glb = '1'
  rgpl = 'illumina'
  params.rgpu = 'unit1'
  outdir = './results'
}




// profiles
profiles {
  standard {
    includeConfig 'conf/base.config'
    includeConfig 'conf/uppmax.config'
    includeConfig 'conf/singularity.config'
  }
}




// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/rnaseq_VAX_timeline.html"
}
trace {
  enabled = true
  file = "${params.outdir}/rnaseq_VAX_trace.txt"
}

def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}